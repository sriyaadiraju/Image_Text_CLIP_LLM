# -*- coding: utf-8 -*-
"""Image_Text_CLIP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mnnpxh8DCXN6sc6ga1Oz4CQ5sZGOsFbK
"""

pip install transformers torch datasets



from datasets import load_dataset

data = load_dataset("jamescalam/image-text-demo"
    , split = "train")

data

data[0]['text']

data[0]['image']

from transformers import CLIPProcessor, CLIPModel

import torch

preprocessor = CLIPProcessor.from_pretrained("openai/clip-vit-base-patch32")

model = CLIPModel.from_pretrained("openai/clip-vit-base-patch32")

device = 'cuda' if torch.cuda.is_available() else 'cpu'

model.to(device)
print(device)

text = data['text']
tokens = preprocessor(
text = text,
padding = True,
images = None,
return_tensors = 'pt').to(device)
tokens.keys()

tokens['input_ids']

tokens['attention_mask']

text_embeddings = model.get_text_features(**tokens.to(device))
print(text_embeddings.shape)
print(text_embeddings.min(), text_embeddings.max())

import numpy as np

text_emb = text_embeddings.detach().cpu().numpy()

norm_factor = np.linalg.norm(text_emb , axis = 1)

text_emb = text_emb.T / np.linalg.norm(text_emb, axis = 1)
text_emb = text_emb.T
print(text_emb.shape)
print(text_emb.min(), text_emb.max())

"""**Now we are preprocessing the Image!**

"""

data['image'][0].size

img_batch = data['image']

images = preprocessor(
    text = None,
    images = img_batch,
    return_tensors = 'pt')['pixel_values'].to(device)

#made them into tokens/patches, now we vectorize them

img_emb = model.get_image_features(images)
print(img_emb.shape)
print(img_emb.min(), img_emb.max())

#lets normalize them like we did for text embeddings

img_emb = img_emb.detach().cpu().numpy()
img_emb = img_emb.T / np.linalg.norm(img_emb, axis = 1)
img_emb = img_emb.T
print(img_emb.shape)
print(img_emb.min(), img_emb.max())

"""Calculate the simlarities of these matrices!

"""

#If you normalized we can just use the dot similarity, else use cosine similarity

from numpy.linalg import norm

cos_sim = np.dot(text_emb, img_emb.T) / (norm(text_emb, axis = 1) *
                                         norm(img_emb, axis =1))

cos_sim.shape

import matplotlib.pyplot as plt

plt.imshow(cos_sim)
plt.show()

dot_sim = np.dot(text_emb, img_emb.T)

plt.imshow(dot_sim)

